#!/bin/bash

### BSM-INSTALL CLI ###

# Vars
repo="$(find ~ -type d -name "Bash-Script-Manager")"
if [ -e ~/.bsm/.vars ]; then
  . ~/.bsm/.vars
else
  echo "Loading from repo..."
  . $repo/.vars # Fallback to repo version
fi
version=$(cat $BSM_ROOT/.version | tail -1)
help="cat $BSM_ROOT/.install-help"


# Functions
cpdeps() {
  # Handle Git Bash integration
  cp -f "$(find $repo -type f -name "bsm")" ~/bin/bsm && echo "Copy of BSM added to user registry!"
  cp -f "$(find $repo -type f -name "rbsm")" ~/bin/rbsm
  cp -f "$(find $repo -type f -name "bsm-install")" ~/bin/bsm-install && echo "Installer copied to user registry!"
  cp -f "$(find $repo -type f -name ".version")" $BSM_ROOT/.version
  cp -f "$(find $repo -type f -name ".vars")" $BSM_ROOT/.vars
  cp -f "$(find $repo -type f -name ".funcs")" $BSM_ROOT/.funcs
  # cp -f "$(find $repo -type f -name "bsm-ac.sh")" /etc/bash_completion.d/bsm
  cp -f "$(find $repo -type f -name ".help")" $BSM_ROOT/.help
  cp -f "$(find $repo -type f -name ".install-help")" $BSM_ROOT/.install-help
  if [[ ! -e $BSM_ROOT/.cfg ]]; then
    cp -f "$(find $repo -type f -name ".cfg")" $BSM_ROOT/.cfg
  fi
  cp -rf "$(find $repo -type d -name "tools")" $BSM_ROOT/
}

install() {
  echo "Installing..."
  [ ! -d ~/bin ] && mkdir ~/bin
  # if [ `command -v ri` ]; then
  #   read -p "Repo Installer found! Would you like to install via 'ri'? [Y\n] " yn
  #   if [[ "${yn,}" == "y" ]]; then 
  #     cd $repo; ri
  #     exit
  #   fi
  # fi
  echo "Setting up logging and scripts folders..."
  if [ ! -d "$BSM_ROOT" ]; then
    [ $MSYSTEM ] && mkdir $BSM_ROOT || sudo mkdir $BSM_ROOT
    [ ! $MSYSTEM ] && sudo chgrp $USER $BSM_ROOT
    [ ! $MSYSTEM ] && sudo chown $USER $BSM_ROOT
    mkdir $BSM_ROOT/scripts
    mkdir $BSM_ROOT/logs
  fi
  # Generate log files
  if [ ! -e $errlog ]; then
    touch $errlog
    [ ! $MSYSTEM ] && sudo chmod 666 $errlog
  fi
  if [ ! -e $log ]; then
    touch $log
    [ ! $MSYSTEM ] && sudo chmod 666 $log
  fi

  echo "Copying program files..."
  cpdeps

  echo "Updating PATH..."
  if [[ "$(echo "$PATH" | grep $BSM_ROOT)" == "" ]]; then
    if [[ "$(command -v chpath)" != "" ]]; then
      chpath add $BSM_ROOT/tools $BSM_SCRIPTS $BSM_SCRIPTS/_node $BSM_SCRIPTS/_python $BSM_SCRIPTS/_ruby $BSM_SCRIPTS/_lisp $BSM_SCRIPTS/_power $BSM_SCRIPTS/_perl
      if [ -e ~/.path ]; then
        echo "PATH updated successfully via chpath"
      else
        echo "There was an unexpected error while adding path via chpath"
      fi
    else
      #This assumes you haven't modified the original bashrc file with your own things that don't end in 'fi'
      echo "### BSM2" >> $HOME/.bashrc
      echo "export PATH=\"\$PATH:$BSM_ROOT/tools:$BSM_SCRIPTS:$BSM_SCRIPTS/_node:$BSM_SCRIPTS/_python:$BSM_SCRIPTS/_ruby:$BSM_SCRIPTS/_lisp:$BSM_SCRIPTS/_power:$BSM_SCRIPTS/_perl\"" >> $HOME/.bashrc
      # source ~/.bashrc #Attempt reload of PATH
    fi
  fi

  #This should setup BSM, logging is sent to stdout to check for any errors
  echo "BSM has been successfully installed!"
  echo "If you can't access BSM, try running \"source ~/.bashrc\""
}

uninstall() {
  echo "Uninstalling BSM..."
  [ $MSYSTEM ] && rm -r $BSM_ROOT || sudo rm -r $BSM_ROOT
  [ $MSYSTEM ] && rm ~/bin/bsm || sudo rm /usr/local/bin/bsm
  [ $MSYSTEM ] && rm ~/bin/rbsm || sudo rm /usr/local/bin/rbsm
  echo "Uninstalling BSM-install..."
  [ $MSYSTEM ] && rm ~/bin/bsm-install || sudo rm /usr/local/sbin/bsm-install
  # echo "Resetting PATH..."
  # echo "$(head -n -1 /home/$USER/.bashrc)" > /home/$USER/.bashrc #Reset bashrc
  # source ~/.bashrc #Attempt reload of PATH
  # export PATH="$(echo "$PATH" | tr -s ':' '\n' | grep -v "$scripts" | tr -s '\n' ':' | sed 's/.$//')" #Reset PATH
  echo "Sucessfully uninstalled BSM!"
}

repair() {
  ### FUNCTION NOT SUPPORTED IN GIT BASH DUE TO PROGRAM AMBIGUITY ###
  [ $MSYSTEM ] && return
  # Ensure snap is setup properly
  [[ `stat / | grep -I "(0755"` == "" ]] && sudo chmod 755 /
  # Begin repair
  echo "Setting up BSM Folders..."
  [ ! -d $BSM_ROOT ] && mkdir $BSM_ROOT
  [ ! -d $BSM_LOGS ] && mkdir $BSM_LOGS
  [ ! -d $BSM_SCRIPTS ] && mkdir $BSM_SCRIPTS
  [ ! -d $BSM_TOOLS ] && mkdir $BSM_TOOLS
  cp -rf "$(find $repo -type d -name "tools")" $BSM_ROOT/
  if [[ "$1" == "" ]]; then
    mkdir $scripts/_node >> $log 2>> $errlog
    mkdir $scripts/_python >> $log 2>> $errlog
    mkdir $scripts/_ruby >> $log 2>> $errlog
    mkdir $scripts/_lisp >> $log 2>> $errlog
    mkdir $scripts/_power >> $log 2>> $errlog
    echo "Installing BSM Dependencies..."
    sudo snap install --edge node --classic >> $log 2>> $errlog
    sudo apt-get install -y python3-pip >> $log 2>> $errlog
    sudo apt-get install -y ruby-full >> $log 2>> $errlog
    sudo apt-get install -y sbcl >> $log 2>> $errlog
    [[ ! `uname -r` =~ "WSL" ]] && sudo snap install powershell --classic
  else
    while [[ "$1" != "" ]]; do
      if [[ "${1,,}" =~ "node" ]]; then
        echo "Installing and setting up Node..."
        mkdir $scripts/_node >> $log 2>> $errlog
        sudo snap install --edge node --classic >> $log 2>> $errlog
      elif [[ "${1,,}" =~ "py" ]]; then
        echo "Installing and setting up Python..."
        mkdir $scripts/_python >> $log 2>> $errlog
        sudo apt-get install -y python3-pip >> $log 2>> $errlog
      elif [[ "${1,,}" =~ "ruby" ]]; then
        echo "Installing and setting up Ruby..."
        mkdir $scripts/_ruby >> $log 2>> $errlog
        sudo apt-get install -y ruby-full >> $log 2>> $errlog
      elif [[ "${1,,}" =~ "li" ]]; then
        echo "Installing and setting up LISP..."
        mkdir $scripts/_lisp >> $log 2>> $errlog
        sudo apt-get install -y sbcl >> $log 2>> $errlog
      elif [[ "${1,,}" =~ "p" ]]; then
        if [[ `uname -r` =~ "WSL" ]]; then
          echo "Using WSL, PowerShell accessible via powershell.exe"
          exit
        else 
          echo "Installing and setting up PowerShell..."
          mkdir $scripts/_power >> $log 2>> $errlog
          sudo snap install powershell --classic >> $log 2>> $errlog
        fi
      fi
      shift
    done
  fi
}

view_logs() {
  if [[ "$1" == "-o" ]]; then
    echo "Output Log:"
    cat $log
    break
  elif [[ "$1" == "-e" ]]; then
    echo "Error Log:"
    cat $errlog
    break
  else
    clear
    while true; do
      echo "Which log would you like to view?"
      echo "[1] Output Log"
      echo "[2] Error Log"
      read opt
      clear
      if [[ "$opt" == "1" ]]; then
        echo "Output Log:"
        cat $log
        break
      elif [[ "$opt" == "2" ]]; then
        echo "Error Log:"
        cat $errlog
        break
      else
        echo "Not an option"
      fi
    done
  fi
}

clear_bsm() {
  #Clear log files
  echo "Clearing logs..."
  echo "" > $errlog
  echo "" > $log
  if [[ "$1" == "log" ]]; then
    return
  elif [[ "${1,,}" =~ "node" ]]; then
    echo -n "This will clear all Node.js scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Node.js scripts..."
      rm $BSM_SCRIPTS/_node/*
    fi
  elif [[ "${1,,}" =~ "py" ]]; then
    echo -n "This will clear all Python scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Python scripts..."
      rm $BSM_SCRIPTS/_python/*
    fi
  elif [[ "${1,,}" =~ "ruby" ]]; then
    echo -n "This will clear all Ruby scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Ruby scripts..."
      rm $BSM_SCRIPTS/_ruby/*
    fi
  elif [[ "${1,,}" =~ "l" ]]; then
    echo -n "This will clear all LISP scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing LISP scripts..."
      rm $BSM_SCRIPTS/_lisp/*
    fi
  elif [[ "${1,,}" =~ "sh" ]]; then
    echo -n "This will clear all Bash scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Bash scripts..."
      rm $BSM_SCRIPTS/* 2> /dev/null
    fi
  else
    echo -n "This will clear ALL SCRIPTS. Do you want to continue? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing all scripts..."
      rm $BSM_SCRIPTS/_node/* 2> /dev/null
      rm $BSM_SCRIPTS/_ruby/* 2> /dev/null
      rm $BSM_SCRIPTS/_python/* 2> /dev/null
      rm $BSM_SCRIPTS/_lisp/* 2> /dev/null
      rm $BSM_SCRIPTS/* 2> /dev/null
    else
      return
    fi
  fi
}

search_args() {
  case $1 in
    -i | --install )
      shift
      install $@
      exit;;
    -u | --uninstall )
      uninstall
      exit;;
    -r | --repair )
      shift
      repair $@
      exit;;
    -v | --version )
      echo "$version"
      exit;;
    -h | --help )
      $help
      exit;;
    -l | --logs )
      shift
      view_logs $1
      exit;;
    -c | --clear )
      shift
      clear_bsm $1
      exit;;
    -R | --ri-fin )
      [ ! $MSYSTEM ] && sudo chgrp $USER $BSM_ROOT
      [ ! $MSYSTEM ] && sudo chown $USER $BSM_ROOT
      [ ! $MSYSTEM ] && sudo chmod 666 $log
      [ ! $MSYSTEM ] && sudo chmod 666 $errlog
      echo "Updating PATH..."
      if [[ "$(echo "$PATH" | grep $BSM_ROOT)" == "" ]]; then
        if [[ "$(command -v chpath)" != "" ]]; then
          chpath add $BSM_ROOT/tools $BSM_SCRIPTS $BSM_SCRIPTS/_node $BSM_SCRIPTS/_python $BSM_SCRIPTS/_ruby $BSM_SCRIPTS/_lisp $BSM_SCRIPTS/_power
          if [ -e ~/.path ]; then
            echo "PATH updated successfully via chpath"
          else
            echo "There was an unexpected error while adding path via chpath"
          fi
        else
          #This assumes you haven't modified the original bashrc file with your own things that don't end in 'fi'
          echo "### BSM2" >> $HOME/.bashrc
          echo "export PATH=\"\$PATH:$BSM_ROOT/tools:$BSM_SCRIPTS:$BSM_SCRIPTS/_node:$BSM_SCRIPTS/_python:$BSM_SCRIPTS/_ruby:$BSM_SCRIPTS/_lisp:$BSM_SCRIPTS/_power\"" >> $HOME/.bashrc
          # source ~/.bashrc #Attempt reload of PATH
        fi
      fi
      ;;
  esac
}

# Main
if [[ "$1" == "" ]]; then
  # No arguments passed, run walkthrough guide
  clear
  echo "Welcome to the BSM Installer!"
  echo "What would you like to do today?"
  select opt in Install Uninstall Repair Logs Clear Exit; do
    case $opt in
      Install )
        install $@;;
      Uninstall )
        uninstall
        break;;
      Repair )
        repair;;
      Logs )
        view_logs;;
      Clear )
        select sel in All Node Python Ruby LISP Bash Logs Exit; do
          case $sel in
            All )
              clear_bsm
              break;;
            Node )
              clear_bsm node
              break;;
            Python )
              clear_bsm python
              break;;
            Ruby )
              clear_bsm ruby
              break;;
            LISP )
              clear_bsm lisp
              break;;
            Bash )
              clear_bsm bash
              break;;
            Logs )
              clear_bsm log
              break;;
            Exit )
              break;;
            * )
              echo "Not an option";;
          esac
        done
        ;;
      Exit )
        break;;
      * )
        echo "Not an option";;
    esac
    echo "1) Install    3) Repair     5) Clear"
    echo "2) Uninstall  4) Logs       6) Exit"
  done
else
  # Arguments passed, see what they are
  search_args $@
fi