#!/bin/bash

### BSM-INSTALL CLI ###

# Vars
. /bsm/.bsm-vars
version=$(cat /bsm/.version | tail -1)
help="cat /bsm/.install-help"
scripts="/bsm/scripts"
repo="$(find ~ -type d -name "Bash-Script-Manager")"


# Functions
cpdeps() {
  sudo cp -f "$(find $repo -type f -name "bsm")" /usr/local/bin/bsm && echo "Copy of BSM added to program registry!"
  sudo cp -f "$(find $repo -type f -name "rbsm")" /usr/local/bin/rbsm
  sudo cp -f "$(find $repo -type f -name "bsm-install")" /usr/local/sbin/bsm-install && echo "Installer copied to system registry!"
  cp -f "$(find $repo -type f -name ".version")" /bsm/.version
  cp -f "$(find $repo -type f -name ".bsm-vars")" /bsm/.bsm-vars
  cp -f "$(find $repo -type f -name ".bsm-funcs")" /bsm/.bsm-funcs
  cp -f "$(find $repo -type f -name ".bsm-ac")" /etc/bash_completion.d/bsm-ac
  cp -f "$(find $repo -type f -name ".help")" /bsm/.help
  cp -f "$(find $repo -type f -name ".install-help")" /bsm/.install-help
  if [[ ! -e /bsm/.config ]]; then
    cp -f "$(find $repo -type f -name "bsm.config")" /bsm/.config
  fi
  cp -rf "$(find $repo -type d -name "tools")" /bsm/
  sudo chmod 644 /bsm/.config
  sudo chmod 755 /usr/local/bin/bsm
  sudo chmod 755 /usr/local/sbin/bsm-install
}
install() {
  echo "Installing..."
  echo "Setting up logging and scripts folders..."
  if [ ! -d "/bsm" ]; then
    sudo mkdir /bsm
    sudo chgrp $USER /bsm
    sudo chown $USER /bsm
    mkdir /bsm/scripts
    mkdir /bsm/logs
  fi
  # Generate log files
  if [ ! -e $errlog ]; then
    touch $errlog
    sudo chmod 666 $errlog
  fi
  if [ ! -e $log ]; then
    touch $log
    sudo chmod 666 $log
  fi

  # Check newer versions
  if [[ "$(cat /bsm/.version | head -1)" != "$(cat "$repo/.version" | head -1)" || "$(cat /bsm/.version | tail -1)" != "$(cat "$repo/.version" | tail -1)" ]]; then
    read -p "Newer version of BSM is available, would you like to install? [Y/n]" yn
    if [[ "${yn,}" == "y" ]]; then
      echo "Installing new version of BSM..."
      cpdeps
    else
      echo "Keeping old version of BSM..."
    fi
  else
    if [[ "$1" == "-f" ]]; then
      echo "Force installing even though current is latest..."
      cpdeps
    else
      echo "Current version is up to date!"
    fi
  fi
  echo "Updating PATH..."
  if [[ "$(echo "$PATH" | grep /bsm)" == "" ]]; then
    if [[ "$(command -v chpath)" != "" ]]; then
      chpath add /bsm/tools $scripts $scripts/_node $scripts/_python $scripts/_ruby $scripts/_lisp $scripts/_power
      if [ -e ~/.path ]; then
        echo "PATH updated successfully via chpath"
      else
        echo "There was an unexpected error while adding path via chpath"
      fi
    else
      #This assumes you haven't modified the original bashrc file with your own things that don't end in 'fi'
      echo "### BSM2" >> /home/$USER/.bashrc
      echo 'export PATH="$PATH:/bsm/tools:$scripts:$scripts/_node:$scripts/_python:$scripts/_ruby:$scripts/_lisp:$scripts/_power"' >> /home/$USER/.bashrc
      # source ~/.bashrc #Attempt reload of PATH
    fi
  fi

  #This should setup BSM, logging is sent to stdout to check for any errors
  echo "BSM has been successfully installed!"
  echo "If you can't access BSM, try running \"source ~/.profile\""
}

uninstall() {
  echo "Uninstalling BSM..."
  sudo rm -r /bsm
  sudo rm /usr/local/bin/bsm
  sudo rm /usr/local/bin/rbsm
  echo "Uninstalling BSM-install..."
  sudo rm /usr/local/sbin/bsm-install
  # echo "Resetting PATH..."
  # echo "$(head -n -1 /home/$USER/.bashrc)" > /home/$USER/.bashrc #Reset bashrc
  # source ~/.bashrc #Attempt reload of PATH
  # export PATH="$(echo "$PATH" | tr -s ':' '\n' | grep -v "$scripts" | tr -s '\n' ':' | sed 's/.$//')" #Reset PATH
  echo "Sucessfully uninstalled BSM!"
}

repair() {
  # Ensure snap is setup properly
  [[ `stat / | grep -I "(0755"` == "" ]] && sudo chmod 755 /
  # Begin repair
  echo "Setting up BSM Folders..."
  [ ! -d /bsm ] && mkdir $BSM_ROOT
  [ ! -d /bsm/logs ] && mkdir $BSM_LOGS
  [ ! -d /bsm/scripts ] && mkdir $BSM_SCRIPTS
  [ ! -d /bsm/tools ] && mkdir $BSM_TOOLS
  cp -rf "$(find $repo -type d -name "tools")" /bsm/
  if [[ "$1" == "" ]]; then
    mkdir $scripts/_node >> $log 2>> $errlog
    mkdir $scripts/_python >> $log 2>> $errlog
    mkdir $scripts/_ruby >> $log 2>> $errlog
    mkdir $scripts/_lisp >> $log 2>> $errlog
    mkdir $scripts/_power >> $log 2>> $errlog
    echo "Installing BSM Dependencies..."
    sudo snap install --edge node --classic >> $log 2>> $errlog
    sudo apt-get install -y python3-pip >> $log 2>> $errlog
    sudo apt-get install -y ruby-full >> $log 2>> $errlog
    sudo apt-get install -y sbcl >> $log 2>> $errlog
    [[ ! `uname -r` =~ "WSL" ]] && sudo snap install powershell --classic
  else
    while [[ "$1" != "" ]]; do
      if [[ "${1,,}" =~ "node" ]]; then
        echo "Installing and setting up Node..."
        mkdir $scripts/_node >> $log 2>> $errlog
        sudo snap install --edge node --classic >> $log 2>> $errlog
      elif [[ "${1,,}" =~ "py" ]]; then
        echo "Installing and setting up Python..."
        mkdir $scripts/_python >> $log 2>> $errlog
        sudo apt-get install -y python3-pip >> $log 2>> $errlog
      elif [[ "${1,,}" =~ "ruby" ]]; then
        echo "Installing and setting up Ruby..."
        mkdir $scripts/_ruby >> $log 2>> $errlog
        sudo apt-get install -y ruby-full >> $log 2>> $errlog
      elif [[ "${1,,}" =~ "li" ]]; then
        echo "Installing and setting up LISP..."
        mkdir $scripts/_lisp >> $log 2>> $errlog
        sudo apt-get install -y sbcl >> $log 2>> $errlog
      elif [[ "${1,,}" =~ "p" ]]; then
        if [[ `uname -r` =~ "WSL" ]]; then
          echo "Using WSL, PowerShell accessible via powershell.exe"
          exit
        else 
          echo "Installing and setting up PowerShell..."
          mkdir $scripts/_power >> $log 2>> $errlog
          sudo snap install powershell --classic >> $log 2>> $errlog
        fi
      fi
      shift
    done
  fi
}

view_logs() {
  if [[ "$1" == "-o" ]]; then
    echo "Output Log:"
    cat $log
    break
  elif [[ "$1" == "-e" ]]; then
    echo "Error Log:"
    cat $errlog
    break
  else
    clear
    while true; do
      echo "Which log would you like to view?"
      echo "[1] Output Log"
      echo "[2] Error Log"
      read opt
      clear
      if [[ "$opt" == "1" ]]; then
        echo "Output Log:"
        cat $log
        break
      elif [[ "$opt" == "2" ]]; then
        echo "Error Log:"
        cat $errlog
        break
      else
        echo "Not an option"
      fi
    done
  fi
}

clear_bsm() {
  #Clear log files
  echo "Clearing logs..."
  echo "" > $errlog
  echo "" > $log
  if [[ "$1" == "log" ]]; then
    return
  elif [[ "${1,,}" =~ "node" ]]; then
    echo -n "This will clear all Node.js scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Node.js scripts..."
      sudo rm $scripts/_node/*
    fi
  elif [[ "${1,,}" =~ "py" ]]; then
    echo -n "This will clear all Python scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Python scripts..."
      sudo rm $scripts/_python/*
    fi
  elif [[ "${1,,}" =~ "ruby" ]]; then
    echo -n "This will clear all Ruby scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Ruby scripts..."
      sudo rm $scripts/_ruby/*
    fi
  elif [[ "${1,,}" =~ "l" ]]; then
    echo -n "This will clear all LISP scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing LISP scripts..."
      sudo rm $scripts/_lisp/*
    fi
  elif [[ "${1,,}" =~ "sh" ]]; then
    echo -n "This will clear all Bash scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Bash scripts..."
      sudo rm $scripts/* 2> /dev/null
    fi
  else
    echo -n "This will clear ALL SCRIPTS. Do you want to continue? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing all scripts..."
      sudo rm $scripts/_node/* 2> /dev/null
      sudo rm $scripts/_ruby/* 2> /dev/null
      sudo rm $scripts/_python/* 2> /dev/null
      sudo rm $scripts/_lisp/* 2> /dev/null
      sudo rm $scripts/* 2> /dev/null
    else
      return
    fi
  fi
}

search_args() {
  case $1 in
    -i | --install )
      shift
      install $@
      exit;;
    -u | --uninstall )
      uninstall
      exit;;
    -r | --repair )
      shift
      repair $@
      exit;;
    -v | --version )
      echo "$version"
      exit;;
    -h | --help )
      $help
      exit;;
    -l | --logs )
      shift
      view_logs $1
      exit;;
    -c | --clear )
      shift
      clear_bsm $1
      exit;;
  esac
}

# Main
if [[ "$1" == "" ]]; then
  # No arguments passed, run walkthrough guide
  clear
  echo "Welcome to the BSM Installer!"
  echo "What would you like to do today?"
  select opt in Install Uninstall Repair Logs Clear Exit; do
    case $opt in
      Install )
        install $@;;
      Uninstall )
        uninstall
        break;;
      Repair )
        repair;;
      Logs )
        view_logs;;
      Clear )
        select sel in All Node Python Ruby LISP Bash Logs Exit; do
          case $sel in
            All )
              clear_bsm
              break;;
            Node )
              clear_bsm node
              break;;
            Python )
              clear_bsm python
              break;;
            Ruby )
              clear_bsm ruby
              break;;
            LISP )
              clear_bsm lisp
              break;;
            Bash )
              clear_bsm bash
              break;;
            Logs )
              clear_bsm log
              break;;
            Exit )
              break;;
            * )
              echo "Not an option";;
          esac
        done
        ;;
      Exit )
        break;;
      * )
        echo "Not an option";;
    esac
    echo "1) Install    3) Repair     5) Clear"
    echo "2) Uninstall  4) Logs       6) Exit"
  done
else
  # Arguments passed, see what they are
  search_args $@
fi