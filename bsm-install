#!/bin/bash

### BSM-INSTALL CLI ###

# Vars
version=$(cat /bsm/.version | tail -1)
log="/bsm/logs/bsm.log"
errlog="/bsm/logs/err.log"
scripts="/bsm/scripts"

# Functions
install() {
  echo "Installing..."
  echo "Setting up logging and scripts folders..."
  if [ ! -d "/bsm" ]; then
    sudo mkdir /bsm
    sudo mkdir /bsm/scripts
    sudo mkdir /bsm/logs
    sudo chown $USER $scripts
    sudo chgrp $USER $scripts
  fi
  if [ ! -e $errlog ]; then
    sudo touch $errlog
    sudo chown $USER $errlog
    sudo chgrp $USER $errlog
    sudo chmod 766 $errlog
  fi
  if [ ! -e $log ]; then
    sudo touch $log
    sudo chown $USER $log
    sudo chgrp $USER $log
    sudo chmod 766 $log
  fi
  sudo cp "$(find ~ -type f -name "bsm")" /usr/local/bin/bsm && echo "Copy of BSM added to program registry!"
  sudo cp "$(find ~ -type f -name "bsm-install")" /usr/local/sbin/bsm-install && echo "Installer copied to system registry!"
  sudo cp "$(find ~ -type f -name ".version")" /bsm/.version
  sudo chmod 755 /usr/local/bin/bsm
  sudo chmod 755 /usr/local/sbin/bsm-install
  echo "Updating PATH..."
  #This assumes you haven't modified the original bashrc file with your own things that don't end in 'fi'
  if [[ "$(echo "$PATH" | grep $scripts)" == "" ]]; then
    echo "export PATH=\"$PATH:$scripts:$scripts/_node:$scripts/_python:$scripts/_ruby:$scripts/_lisp\"" >> /home/$USER/.bashrc
    source ~/.bashrc #Attempt reload of PATH
  fi

  #This should setup BSM, logging is sent to stdout to check for any errors
  echo "BSM has been successfully installed!"
  echo "If you can't access BSM, try running \"source ~/.profile\""
}

uninstall() {
  echo "Uninstalling BSM..."
  sudo rm -r /bsm
  sudo rm /usr/local/bin/bsm
  echo "Uninstalling BSM-install..."
  sudo rm /usr/local/sbin/bsm-install
  echo "Resetting PATH..."
  echo "$(head -n -1 /home/$USER/.bashrc)" > /home/$USER/.bashrc #Reset bashrc
  source ~/.bashrc #Attempt reload of PATH
  # export PATH="$(echo "$PATH" | tr -s ':' '\n' | grep -v "$scripts" | tr -s '\n' ':' | sed 's/.$//')" #Reset PATH
  echo "Sucessfully uninstalled BSM!"
}

repair() {
  if [[ "${2,,}" =~ "node" ]]; then
  echo "Installing and setting up Node..."
    sudo mkdir $scripts/_node
    sudo snap install --edge node --classic >> $log 2>> $errlog
  elif [[ "${2,,}" =~ "py" ]]; then
  echo "Installing and setting up Python..."
    sudo mkdir $scripts/_python
    sudo apt-get install python3-pip >> $log 2>> $errlog
  elif [[ "${2,,}" =~ "ruby" ]]; then
  echo "Installing and setting up Ruby..."
    sudo mkdir $scripts/_ruby
    sudo apt-get install ruby-full >> $log 2>> $errlog
  elif [[ "${2,,}" =~ "l" ]]; then
  echo "Installing and setting up LISP..."
    sudo mkdir $scripts/_lisp
    sudo apt-get install sbcl >> $log 2>> $errlog
  else
    echo "Setting up BSM Folders..."
    sudo mkdir $scripts/_node
    sudo mkdir $scripts/_python
    sudo mkdir $scripts/_ruby
    sudo mkdir $scripts/_lisp
    echo "Installing BSM Dependencies..."
    sudo snap install --edge node --classic >> $log 2>> $errlog
    sudo apt-get install python3-pip >> $log 2>> $errlog
    sudo apt-get install ruby-full >> $log 2>> $errlog
    sudo apt-get install sbcl >> $log 2>> $errlog
  fi
}

view_logs() {
  shift
  if [[ "$1" == "-o" ]]; then
    echo "Output Log:"
    cat $log
    break
  elif [[ "$1" == "-e" ]]; then
    echo "Error Log:"
    cat $errlog
    break
  else
    clear
    while true; do
      echo "Which log would you like to view?"
      echo "[1] Output Log"
      echo "[2] Error Log"
      read opt
      clear
      if [[ "$opt" == "1" ]]; then
        echo "Output Log:"
        cat $log
        break
      elif [[ "$opt" == "2" ]]; then
        echo "Error Log:"
        cat $errlog
        break
      else
        echo "Not an option"
      fi
    done
  fi
}

clear_bsm() {
  #Clear log files
  echo "Clearing logs..."
  echo "" > $errlog
  echo "" > $log
  if [[ "$1" == "log" ]]; then
    break
  elif [[ "${1,,}" =~ "node" ]]; then
    echo -n "This will clear all Node.js scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Node.js scripts..."
      sudo rm $scripts/_node/*
    fi
  elif [[ "${1,,}" =~ "py" ]]; then
    echo -n "This will clear all Python scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Python scripts..."
      sudo rm $scripts/_python/*
    fi
  elif [[ "${1,,}" =~ "ruby" ]]; then
    echo -n "This will clear all Ruby scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Ruby scripts..."
      sudo rm $scripts/_ruby/*
    fi
  elif [[ "${1,,}" =~ "l" ]]; then
    echo -n "This will clear all LISP scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing LISP scripts..."
      sudo rm $scripts/_lisp/*
    fi
  elif [[ "${1,,}" =~ "sh" ]]; then
    echo -n "This will clear all Bash scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Bash scripts..."
      sudo rm $scripts/* 2> /dev/null
    fi
  else
    echo -n "This will clear ALL SCRIPTS. Do you want to continue? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing all scripts..."
      sudo rm $scripts/_node/* 2> /dev/null
      sudo rm $scripts/_ruby/* 2> /dev/null
      sudo rm $scripts/_python/* 2> /dev/null
      sudo rm $scripts/_lisp/* 2> /dev/null
      sudo rm $scripts/* 2> /dev/null
    else
      break
    fi
  fi
}

search_args() {
  case $1 in
    -i | --install )
      install
      exit;;
    -u | --uninstall )
      uninstall
      exit;;
    -r | --repair )
      repair
      exit;;
    -v | --version )
      echo "$version"
      exit;;
    -l | --logs )
      view_logs $2
      exit;;
    -c | --clear )
      clear_bsm $2
      exit;;
  esac
}

# Main
if [[ "$1" == "" ]]; then
  # No arguments passed, run walkthrough guide
  clear
  echo "Welcome to the BSM Installer!"
  echo "What would you like to do today?"
  select opt in Install Uninstall Repair Logs Clear Exit; do
    case $opt in
      Install )
        install;;
      Uninstall )
        uninstall
        break;;
      Repair )
        repair;;
      Logs )
        view_logs;;
      Clear )
        select sel in All Node Python Ruby LISP Bash Logs Exit; do
          case $sel in
            All )
              clear_bsm
              ;;
            Node )
              clear_bsm node
              ;;
            Python )
              clear_bsm python
              ;;
            Ruby )
              clear_bsm ruby
              ;;
            LISP )
              clear_bsm lisp
              ;;
            Bash )
              clear_bsm bash
              ;;
            Logs )
              clear_bsm log
              ;;
            Exit )
              ;;
            * )
              echo "Not an option";;
          esac
          break
        done
        ;;
      Exit )
        break;;
      * )
        echo "Not an option";;
    esac
    echo "Welcome to the BSM Installer!"
    echo "What would you like to do today?"
    echo "1) Install    3) Repair     5) Clear"
    echo "2) Uninstall  4) Logs       6) Exit"
  done
else
  # Arguments passed, see what they are
  shift
  search_args $@
fi