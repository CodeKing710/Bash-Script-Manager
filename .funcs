#!/bin/bash

### FUNCTION PACK FOR BSM FUNCTIONALITY ###

# CLI-arg mode
search_args() {
  while [[ "$1" != "" ]]; do
    case $1 in
      -c | --create )
        shift
        if [[ "$1" == "" ]]; then
          echo "Missing required argument: 'NAME'"
          exit
        else
          create_script $@
          shift # Fixes glitch with above function returning back with parsed args
        fi
        ;;
      -o | --open )
        shift
        if [[ "$1" == "" ]]; then
          echo "Missing required argument: 'SCRIPT'"
          exit
        else
          open_script $1
        fi
        exit;;
      -i | --import )
        shift
        if [[ "$1" == "" ]]; then
          echo "Missing required argument: 'SCRIPT'"
          exit
        else
          import_script $@
        fi
        exit;;
      -e | --export )
        shift
        if [[ "$1" == "" ]]; then
          echo "Missing required argument: 'SCRIPT'"
          exit
        else
          if [[ "$2" == "" ]]; then
            echo "Missing required argument: 'DESTINATION'"
            exit
          else
            export_script $1 $2
          fi
        fi
        exit;;
      -L | --link )
        shift
        if [[ "$1" == "" ]]; then
          echo "Missing required argument: 'SCRIPT'"
          exit
        else
          if [[ "$2" == "" ]]; then
            echo "Missing required argument: 'NAME'"
            exit
          else
            link_script $1 $2
          fi
        fi
        shift #Ensure the shift at the end doesn't reread a used argument since this one is chainable
        ;;
      -n | --rename )
        shift
        if [[ "$1" == "" ]]; then
          echo "Missing required argument: 'SCRIPT'"
          exit
        else
          if [[ "$2" == "" ]]; then
            echo "Missing required argument: 'NEW_NAME'"
          else
            rename_script $1 $2
          fi
        fi
        shift
        exit;;
      -r | --remove )
        shift
        if [[ "$1" == "" ]]; then
          echo "Missing required argument: 'SCRIPT'"
          exit
        else
          remove_scripts $@
        fi
        exit;;
      -C | --config )
        shift
        if [[ "$1" == "" ]]; then
          echo "Missing required argument: 'RULE'"
          exit
        else
          if [[ "$2" == "-C" || "$2" == "--config" ]]; then
            config_bsm $1
          else
            config_bsm $1 $2
            shift
          fi
        fi
        ;;
      -t | --tool )
        shift
        if [[ "$1" == "-a" || "$1" == "--add" ]]; then
          add_tool $@
        else
          get_tool $@
        fi
        exit;;
      -S | --shell )
        shift
        rbsm $@
        exit;;
      -l | --list )
        list_scripts
        exit;;
      -v | --version )
        echo "$version"
        exit;;
      -h | --help )
        $help
        exit;;
      * )
        echo "Err: No argument found with '$1' in BSM"
        exit;;
    esac
    shift # Move onto next argument in list
  done
}

# CLI-cmd mode
search_cmds() {
  while [[ "$1" != "" ]]; do
    local cmd="${1,}"
    shift
    case $cmd in
      create )
        if [[ "$1" == "" ]]; then
          echo "Missing required argument: 'NAME'"
        else
          sub="${1,}"
          shift
          name="$1"
          case $sub in
            ps | ps1 | powershell )
              create_script -P $name
              ;;
            py | python )
              create_script -p $name
              ;;
            pl | perl )
              create_script -e $name
              ;;
            js | node )
              create_script -n $name
              ;;
            rb | ruby )
              create_script -r $name
              ;;
            cl | lisp )
              create_script -l $name
              ;;
            sh | bash )
              create_script -b $name
              ;;
            * )
              create_script $sub
              ;;
          esac
        fi
        ;;
      open )
        name="$1"
        if [[ "$name" == "" ]]; then
          echo "Missing required argument: 'NAME'"
        else
          open_script $name
        fi
        ;;
      import )
        script="$1"
        if [[ "$script" == "" ]]; then
          echo "Missing required argument: 'SCRIPT'"
        else
          import_script $@
        fi
        ;;
      export )
        script="$1"
        shift
        dest="$1"
        if [[ "$script" == "" ]]; then
          echo "Missing required argument: 'SCRIPT'"
        else
          if [[ "$dest" == "" ]]; then
            echo "Missing required argument: 'DESTINATION'"
          else
            export_script $script $dest
          fi
        fi
        ;;
      link )
        script="$1"
        shift
        name="$1"
        if [[ "$script" == "" ]]; then
          echo "Missing required argument: 'SCRIPT'"
        else
          if [[ "$name" == "" ]]; then
            echo "Missing required argument: 'NAME'"
          else
            link_script $script $name
          fi
        fi
        ;;
      rename )
        name="$1"
        shift
        newname="$1"
        if [[ "$name" == "" ]]; then
          echo "Missing required argument: 'NAME'"
        else
          if [[ "$newname" == "" ]]; then
            echo "Missing required argument: 'NEW_NAME'"
          else
            rename_script $name $newname
          fi
        fi
        ;;
      remove )
        name="$1"
        if [[ "$name" == "" ]]; then
          echo "Missing required argument: 'SCRIPT'"
        else
          remove_scripts $@
        fi
        ;;
      config )
        rule="${1,}"
        shift
        value="${1,}"
        if [[ "$rule" == "" ]]; then
          echo "Missing required argument: 'RULE'"
        else
          if [[ "$value" == "" || "$value" == "config" ]]; then
            config_bsm $rule
          else
            config_bsm $rule $value
          fi
        fi
        ;;
      tool )
        # tool=$1
        if [[ "$1" == "add" ]]; then
          add_tool $@
        else
          get_tool $@
        fi
        while (($#)); do shift; done
        ;;
      sh | shell | rbsm )
        rbsm $@
        ;;
      list )
        list_scripts
        ;;
      version )
        echo "$version"
        ;;
      help )
        $help
        ;;
      * )
        echo "Err: No argument found with '$1' in BSM"
        ;;
    esac
  shift; done
}

# Functions
mkperl() {
  local name=$1
  if [[ ! -d "$BSM_SCRIPTS/_perl" ]]; then
    echo "Setting up BSM for usage with Perl..."
    mkdir $BSM_SCRIPTS/_perl >> $log 2>> $errlog
  fi
  touch "$BSM_SCRIPTS/_perl/${name%.pl}" && chmod 755 "$BSM_SCRIPTS/_perl/${name%.pl}"
  printf "#!/bin/perl\n\n# Write script code" > "$BSM_SCRIPTS/_perl/${name%.pl}"
  if [[ -e "$BSM_SCRIPTS/_perl/${name%.pl}" ]]; then
    echo "Script Created!"
  fi
}
mknode() {
  local name=$1
  #Make Nodejs folder, exe, installation
  if [[ ! -d "$BSM_SCRIPTS/_node" ]]; then
    echo "Installing Node.js and dependencies..."
    mkdir $BSM_SCRIPTS/_node >> $log 2>> $errlog
    [ ! $MSYSTEM ] && sudo snap install --edge node --classic >> $log 2>> $errlog || echo "Ran into issue installing, check $BSM_ROOT/logs/err_log.log"
    echo "Finished installing Node!"
  fi
  touch "$BSM_SCRIPTS/_node/${name%.js}" && chmod 755 "$BSM_SCRIPTS/_node/${name%.js}"
  printf "#!/bin/env node\n\n//Write script code" > "$BSM_SCRIPTS/_node/${name%.js}"
  if [[ -e "$BSM_SCRIPTS/_node/${name%.js}" ]]; then
    echo "Script Created!"
  fi
}
mkpyth() {
  local name=$1
  #Make python folder and executable (Install python if not installed)
  if [[ ! -d "$BSM_SCRIPTS/_python" ]]; then
    echo "Installing Python and setting up dependencies..."
    mkdir $BSM_SCRIPTS/_python >> $log 2>> $errlog
    [ ! $MSYSTEM ] && sudo apt-get install -y python3-pip >> $log 2>> $errlog || echo "Ran into issue installing, check $BSM_ROOT/logs/err_log.log"
    echo "Finished installing Python!"
  fi
  touch "$BSM_SCRIPTS/_python/${name%.py}" && chmod 755 "$BSM_SCRIPTS/_python/${name%.py}"
  [ $MSYSTEM ] && printf "#!/bin/env python\n\n#Write script code" > "$BSM_SCRIPTS/_python/${name%.py}" || printf "#!/bin/env python3\n\n#Write script code" > "$BSM_SCRIPTS/_python/${name%.py}"
  if [[ -e "$BSM_SCRIPTS/_python/${name%.py}" ]]; then
    echo "Script Created!"
  fi
}
mklisp() {
  local name=$1
  #LISP folder, exe, install
  if [[ ! -d "$BSM_SCRIPTS/_lisp" ]]; then
    echo "Installing CommonLISP and dependencies..."
    echo "View log file for details"
    mkdir $BSM_SCRIPTS/_lisp >> $log 2>> $errlog
    [ ! $MSYSTEM ] && sudo apt-get install sbcl -y >> $log 2>> $errlog || echo "Ran into issue installing, check $BSM_ROOT/logs/err_log.log"
    echo "Finished installing LISP!"
  fi
  touch "$BSM_SCRIPTS/_lisp/${name%.cl}" && chmod 755 "$BSM_SCRIPTS/_lisp/${name%.cl}"
  [ $MSYSTEM ] && printf "#!/bin/env -S sbcl --script\n\n;; Write script code (Might need to change env shebang value!)" > "$BSM_SCRIPTS/_lisp/${name%.cl}" || printf "#!/bin/env -S sbcl --script\n\n;; Write script code" > "$BSM_SCRIPTS/_lisp/${name%.cl}"
  if [[ -e "$BSM_SCRIPTS/_lisp/${name%.cl}" ]]; then
    echo "Script Created!"
  fi
}
mkruby() {
  local name=$1
  #Ruby folder, exe, install
  if [[ ! -d "$BSM_SCRIPTS/_ruby" ]]; then
    echo "Installing Ruby and dependencies..."
    mkdir $BSM_SCRIPTS/_ruby >> $log 2>> $errlog
    sudo apt-get install ruby-full -y >> $log 2>> $errlog || echo "Ran into issue installing, check $BSM_ROOT/logs/err_log.log"
    echo "Finished installing Ruby!"
  fi
  touch "$BSM_SCRIPTS/_ruby/${name%.rb}" && chmod 755 "$BSM_SCRIPTS/_ruby/${name%.rb}"
  printf "#!/bin/env ruby\n\n#Write script code" > "$BSM_SCRIPTS/_ruby/${name%.rb}"
  if [[ -e "$BSM_SCRIPTS/_ruby/${name%.rb}" ]]; then
    echo "Script Created!"
  fi
}
mkpwsh() {
  local name=$1
  if [[ "$(uname -r)" =~ "WSL" || "$(uname -s)" =~ "MINGW" ]]; then
    if [[ ! -d "$BSM_SCRIPTS/_power" ]]; then
      mkdir $BSM_SCRIPTS/_power
      echo "Set up PowerShell for use in BSM!"
    fi
    # Make editable PowerShell file separately from the actual script executable
    touch "$BSM_SCRIPTS/_power/${name%.***}.ps1" && chmod 755 "$BSM_SCRIPTS/_power/${name%.***}.ps1" && echo "# PowerShell code below" > "$BSM_SCRIPTS/_power/${name%.***}.ps1"
    # Make executable that calls PowerShell passing the script
    # This is done since using powershell.exe doesn't work in environment mode
    touch "$BSM_SCRIPTS/_power/${name%.***}" && chmod 755 "$BSM_SCRIPTS/_power/${name%.***}"
    echo -e "#!/bin/bash\n\npowershell.exe -F '$BSM_SCRIPTS/_power/${name%.***}.ps1'" > "$BSM_SCRIPTS/_power/${name%.***}"
    if [[ -e "$BSM_SCRIPTS/_power/${name%.***}" && -e "$BSM_SCRIPTS/_power/${name%.***}.ps1" ]]; then
      echo "Script Created!"
      echo "When executing, you should consider whitelisting the script to PowerShell so you don't have to allow it each time!"
    fi
  else
    echo "PowerShell not integrated to true Linux BSM yet"
  fi
}
mkbash() {
  local name=$1
  touch "$BSM_SCRIPTS/${name%.**}" && chmod 755 "$BSM_SCRIPTS/${name%.**}"
  printf "#!/bin/bash\n\n#Write script code" > "$BSM_SCRIPTS/${name%.**}"
  if [[ -e "$BSM_SCRIPTS/${name%.**}" ]]; then
    echo "Script Created!"
  fi
}
conflict() {
  echo "Script with that name exists! Keeping Original..."
  echo -n "Would you like to open this script? [Y/n] "
  read yn
  if [[ "${yn,}" =~ "y" ]]; then
    open_script "${name%.**}"
  fi
}
create_script() {
  if [[ "$1" =~ "-" ]]; then
    local name=$2
    case $1 in
      -p | --python )
        if [[ ! -e "$BSM_SCRIPTS/_python/${name%.**}" ]]; then
          mkpyth $name
        else
          conflict
        fi
        ;;
      -n | --node )
        if [[ ! -e "$BSM_SCRIPTS/_node/${name%.**}" ]]; then
          mknode $name
        else
          conflict
        fi
        ;;
      -r | --ruby )
        if [[ ! -e "$BSM_SCRIPTS/_ruby/${name%.**}" ]]; then
          mkruby $name
        else
          conflict
        fi
        ;;
      -l | --lisp )
        if [[ ! -e "$BSM_SCRIPTS/_lisp/${name%.**}" ]]; then
          mklisp $name
        else
          conflict
        fi
        ;;
      -b | --bash )
        if [[ ! -e "$BSM_SCRIPTS/$name" ]]; then
          mkbash $name
        else
          conflict
        fi
        ;;
      -P | --powershell )
        if [[ ! -e "$BSM_SCRIPTS/_power/${name%.***}" ]]; then
          mkpwsh $name
        else
          conflict
        fi
        ;;
      -e | --perl )
        if [[ ! -e "$BSM_SCRIPTS/_perl/${name%.**}" ]]; then
          mkpwsh $name
        else
          conflict
        fi
        ;;
    esac
    shift # Force move past name so search args doesn't parse this again
  else
    local name=$1
    # Check if next arg is a name or a type def
    if [[ ! -e "$BSM_SCRIPTS/_perl/${name%.**}" && ! -e "$BSM_SCRIPTS/_power/${name%.***}" && ! -e "$BSM_SCRIPTS/_lisp/${name%.**}" && ! -e "$BSM_SCRIPTS/_ruby/${name%.**}" && ! -e "$BSM_SCRIPTS/_node/${name%.**}" && ! -e "$BSM_SCRIPTS/_python/${name%.**}" && ! -e "$BSM_SCRIPTS/$name" ]]; then
      if [[ "$name" =~ ".js" ]]; then # Node
        mknode $name
      elif [[ "$name" =~ ".py" ]]; then # Python
        mkpyth $name
      elif [[ "$name" =~ ".rb" ]]; then # Ruby
        mkruby $name
      elif [[ "$name" =~ ".cl" ]]; then # LISP
        mklisp $name
      elif [[ "$name" =~ ".ps1" ]]; then # PowerShell
        mkpwsh $name
      elif [[ "$name" =~ ".pl" ]]; then #Perl
        mkperl $name
      else # Bash
        mkbash $name
      fi
    else
      conflict
    fi
  fi
}
open_script() {
  local name=$1
  # Special PowerShell check
  if [[ -e "$BSM_SCRIPTS/_power/${name%.***}" ]]; then
    echo "Script found, opening..."
    find -L "$BSM_SCRIPTS/_power/${name%.***}" -type f -name "${name%.***}" -exec $editor {}.ps1 \;
  # Check rest normally
  elif [[ -e "$BSM_SCRIPTS/_perl/${name%.**}" || -e "$BSM_SCRIPTS/_lisp/${name%.**}" || -e "$BSM_SCRIPTS/_ruby/${name%.**}" || -e "$BSM_SCRIPTS/_python/${name%.**}" || -e "$BSM_SCRIPTS/_node/${name%.**}" || -e "$BSM_SCRIPTS/${name%.**}" ]]; then
    echo "Script found, opening..."
    find -L $BSM_SCRIPTS -type f -name "${name%.**}" -exec $editor {} \;
  else
    echo "Script not found, creating..."
    create_script "$name"
    open_script "${name%.***}"
  fi
}
remove_scripts() {
  while [[ $1 != "" ]]; do
    local n=$1
    if [[ -e "$BSM_SCRIPTS/${n%.**}" ]]; then
      rm "$BSM_SCRIPTS/${n%.**}" >> $log 2>> $errlog
      if [[ ! -e "$BSM_SCRIPTS/${n%.**}" ]]; then
        echo "Script Removed!"
      else
        echo "Unable to remove script, refer to $BSM_ROOT/logs/err.log for details"
      fi
    else
      # Check for other executables
      if [[ -e "$BSM_SCRIPTS/_python/${n%.**}" ]]; then
        rm "$BSM_SCRIPTS/_python/${n%.**}" >> $log 2>> $errlog
        if [[ ! -e "$BSM_SCRIPTS/_python/${n%.**}" ]]; then
          echo "Script(s) Removed!"
        else
          echo "Unable to remove script, refer to $BSM_ROOT/logs/err.log for details"
        fi
      elif [[ -e "$BSM_SCRIPTS/_node/${n%.**}" ]]; then
        rm "$BSM_SCRIPTS/_node/${n%.**}" >> $log 2>> $errlog
        if [[ ! -e "$BSM_SCRIPTS/_node/${n%.**}" ]]; then
          echo "Script(s) Removed!"
        else
          echo "Unable to remove script, refer to $BSM_ROOT/logs/err.log for details"
        fi
      elif [[ -e "$BSM_SCRIPTS/_ruby/${n%.**}" ]]; then
        rm "$BSM_SCRIPTS/_ruby/${n%.**}" >> $log 2>> $errlog
        if [[ ! -e "$BSM_SCRIPTS/_ruby/${n%.**}" ]]; then
          echo "Script(s) Removed!"
        else
          echo "Unable to remove script, refer to $BSM_ROOT/logs/err.log for details"
        fi
      elif [[ -e "$BSM_SCRIPTS/_lisp/${n%.**}" ]]; then
        rm "$BSM_SCRIPTS/_lisp/${n%.**}" >> $log 2>> $errlog
        if [[ ! -e "$BSM_SCRIPTS/_lisp/${n%.**}" ]]; then
          echo "Script(s) Removed!"
        else
          echo "Unable to remove script, refer to $BSM_ROOT/logs/err.log for details"
        fi
      elif [[ -e "$BSM_SCRIPTS/_power/${n%.***}" || -e "$BSM_SCRIPTS/_power/${n%.***}.ps1" ]]; then
        rm "$BSM_SCRIPTS/_power/${n%.***}" >> $log 2>> $errlog
        rm "$BSM_SCRIPTS/_power/${n%.***}.ps1" >> $log 2>> $errlog
        if [[ ! -e "$BSM_SCRIPTS/_power/${n%.***}" ]]; then
          echo "Script(s) Removed!"
        else
          echo "Unable to remove script, refer to $BSM_ROOT/logs/err.log for details"
        fi
      elif [[ -e "$BSM_SCRIPTS/_perl/${n%.**}" ]]; then
        rm "$BSM_SCRIPTS/_perl/${n%.**}" >> $log >> $errlog
        if [[ ! -e "$BSM_SCRIPTS/_perl/${n%.**}" ]]; then
          echo "Script(s) Removed!"
        else
          echo "Unable to remove script, refer to $BSM_ROOT/logs/err.log for details"
        fi
      else
        echo "Script doesn't exist!"
      fi
    fi
    shift
  done
}
rename_script() {
  local oldname=$1
  local loc="$(find -L $BSM_SCRIPTS -type f -name "$oldname")"
  if [[ "$loc" == "" ]]; then
    echo "Script to rename doesn't exist!"
    exit
  fi
  shift
  if [[ $1 == "" ]]; then
    echo "You must supply a name to rename to!"
    echo -n "Enter name: "
    read newname
  else
    local newname=$1
  fi
  echo "Renaming..."
  # Check PowerShell
  if [[ "$loc" =~ "/_power/" ]]; then
    swap="$(cat "$BSM_SCRIPTS/_power/$oldname.ps1")"
    remove_scripts $oldname >> $log
    create_script -P $newname >> $log
    echo -e "$swap" > $BSM_SCRIPTS/_power/$newname.ps1
  else
    mv "$loc" "$(echo "$loc" | sed "s/\/$oldname/\/$newname/")"
  fi
  echo "Script renamed!"
}
link_script() {
  local file=$1
  local name=$2
  sudo chmod 757 "$file"
  ln -s -t $BSM_SCRIPTS "$file" "$name" >> $log 2>> $errlog
  if [[ -e "$BSM_SCRIPTS/$name" ]]; then
    echo "Script Linked!"
  else
    echo "Failed to Link!"
  fi
}
import_script() {
  while [[ "$1" != "" ]]; do
    local name=$1
    create_script "$name"
    local scriptpath="$BSM_SCRIPTS"
    if [[ "$name" =~ ".js" ]]; then
      scriptpath="$scriptpath/_node"
    elif [[ "$name" =~ ".py" ]]; then
      scriptpath="$scriptpath/_python"
    elif [[ "$name" =~ ".rb" ]]; then
      scriptpath="$scriptpath/_ruby"
    elif [[ "$name" =~ ".cl" ]]; then
      scriptpath="$scriptpath/_lisp"
    elif [[ "$name" =~ ".pl" ]]; then
      scriptpath="$scriptpath/_perl"
    fi
    cat $(find -L -path $BSM_ROOT -prune -type f -name "$name") >> "$scriptpath/${name%.**}"
  done
}
export_script() {
  local script=$1
  local dest=$2
  echo "Exporting..."
  if [[ "$(diff "$BSM_SCRIPTS/${script%.***}" "$dest/${script%.***}")" != "" ]]; then
    echo -n "Script in destination doesn't match script being exported, are you sure you want to overwrite the destination? [Y/n] "
    read yn
    if [[ "${yn,}" == "y" ]]; then
      echo "Overwriting destination file..."
      cp "$BSM_SCRIPTS/${script%.***}" "$dest"
      echo "Script exported to '$dest'"
    else
      echo "Operation cancelled"
      return
    fi
  else
    cp "$BSM_SCRIPTS/${script%.***}" "$dest"
  fi
}
list_scripts() {
  local list=`ls -pR1 $BSM_SCRIPTS | grep -v / | grep -v '\...' | tr -s '\n' ' ' | tr ' ' '\n' | xargs -i echo "- {}"`
  if [[ "$list" == "" ]]; then
    echo "No Scripts Created Yet!"
  else
    echo -e "Available Scripts:\n$list"
  fi
}
config_bsm() {
  if [[ "$2" == "" ]]; then
    # Get rule
    echo "Rule: $(cat $BSM_ROOT/.cfg | grep "$1")"
  else
    # Set rule
    sed -i -e "s/$1=$editor/$1=$2/" $BSM_ROOT/.cfg
    echo "Rule change: $(cat $BSM_ROOT/.cfg | grep "$1")"
  fi
}
get_tool() {
  local tools_reg=$(ls -1 $BSM_TOOLS)
  local ptool=$1
  if [[ "$ptool" == "" ]]; then
    # List all tools
    echo "Available tools: "
    echo "$tools_reg"
  else
    for tool in $tools_reg; do
      for segment in $(echo "$ptool" | cut -d '-' -f2); do
        if [[ "$tool" =~ "$segment" ]]; then
          echo "Tool with like name found!"
          echo "You can call this tool from the command line via '$tool [options]'"
          read -p "Open tool now? [Y/n] " yn
          if [[ "${yn,}" =~ "y" ]]; then
            shift # Include arbitrary args
            $tool $@
          fi
          break
        fi
      done
    done
  fi
}
add_tool() {
  echo "Tool in progress"
}
# remove_tool() {}