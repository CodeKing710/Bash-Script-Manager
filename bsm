#!/bin/bash

#Globals
help=$(cat <<HELP
Bash Script Manager

Usage: bsm [OPTIONS] ...

Options:
    -c | --create [NAME] [...OPTIONS]
	Add new script(s) to your personal scripts. Specify a file extension to use a specific scripting language. Bash is default and doesn't require a file extension.
	Available: .js, .py, .rb, .cl

    -l | --list
	Show list of available personal scripts

    -L | --link [FILE] [DEST_NAME]
	Create a shortcut executable to an existing script. FILE points to the file to link, DEST_NAME points to where the link will reside.

    -o | --open [NAME]
	Open a script for editing (ONLY PERSONAL SCRIPTS LOCATED AT /scripts).
    Makes a new script respective to the env path (file ext). Bash creation does not require this.
    Will still open respective file even if env path is provided

    -r | --remove [NAME] [...NAMES]
	Remove script(s) from personal scripts (DOES NOT TOUCH SYSTEM EXECUTABLES)

    -a | --add
    Add an external script directly to bsm

    -I | --install
    Installs/Reinstalls BSM to your system

    -U | --uninstall
    Completely removes any remnant of BSM from your system

    -R | --reinstall-deps [...NAME]
    Force installs all dependencies used by BSM (Node.js, Python3, Ruby, CommonLISP) and adds any folders that aren't yet created. Can add an argument after to define a specific dependency to reinstall, but it is optional.

    -v | --version
        Show version

    -h | --help
        Show this screen
    
HELP
);
version="1.2.1";
log="/var/log/bsm_log.log"
errlog="/var/log/bsm_err_log.log"

#INIT
if [[ ! -d /scripts ]]; then
    echo "FIRST TIME SETUP!"
    source "$(find ~ -name "bsm-install")"
fi

#Go thru args
if [[ "$1" == "" ]]; then
    echo "$help"
    exit
fi
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
    case "$1" in
        -c | --create )
            shift
            name=$1
            if [[ ! -e "/scripts/node/${name%.**}" && ! -e "/scripts/python/${name%.**}" && ! -e "/scripts/$name" ]]; then

                #Check for other types of executeable scripts
                if [[ "$name" =~ ".py" ]]; then
                    #Make python folder and executable (Install python if not installed)
                    if [[ ! -d "/scripts/python" ]]; then
                        echo "Installing Python and setting up dependencies..."
                        mkdir /scripts/python >> $log 2>> $errlog
                        sudo apt-get install -y python3-pip >> $log 2>> $errlog || echo "Ran into issue installing, check /var/log/bsm_err_log.log"
                    fi
                    touch "/scripts/python/${name%.py}" && chmod 757 "/scripts/python/${name%.py}"
                    printf "#!/bin/env python3\n\n#Write script code" > "/scripts/python/${name%.py}"
                    if [[ -e "/scripts/python/${name%.py}" ]]; then
                        echo "Script Created!"
                    fi
                elif [[ "$name" =~ ".js" ]]; then
                    #Make Nodejs folder, exe, installation
                    if [[ ! -d "/scripts/node" ]]; then
                        echo "Installing Node.js and dependencies..."
                        mkdir /scripts/node >> $log 2>> $errlog
                        sudo snap install --edge node --classic >> $log 2>> $errlog || echo "Ran into issue installing, check /var/log/bsm_err_log.log"
                    fi
                    touch "/scripts/node/${name%.js}" && chmod 757 "/scripts/node/${name%.js}"
                    printf "#!/bin/env node\n\n//Write script code" > "/scripts/node/${name%.js}"
                    if [[ -e "/scripts/node/${name%.js}" ]]; then
                        echo "Script Created!"
                    fi
                elif [[ "$name" =~ ".rb" ]]; then
                    #Ruby folder, exe, install
                    if [[ ! -d "/scripts/ruby" ]]; then
                        echo "Installing Ruby and dependencies..."
                        mkdir /scripts/ruby >> $log 2>> $errlog
                        sudo apt install ruby-full -y >> $log 2>> $errlog || echo "Ran into issue installing, check /var/log/bsm_err_log.log"
                    fi
                    touch "/scripts/ruby/${name%.rb}" && chmod 757 "/scripts/ruby/${name%.rb}"
                    printf "#!/bin/env ruby\n\n#Write script code" > "/scripts/ruby/${name%.rb}"
                    if [[ -e "/scripts/ruby/${name%.rb}" ]]; then
                        echo "Script Created!"
                    fi
                elif [[ "$name" =~ ".cl" ]]; then
                    #LISP folder, exe, install
                    if [[ ! -d "/scripts/lisp" ]]; then
                        echo "Installing CommonLISP and dependencies..."
                        echo "View log file for details"
                        mkdir /scripts/lisp >> $log 2>> $errlog
                        sudo apt install sbcl -y >> $log 2>> $errlog || echo "Ran into issue installing, check /var/log/bsm_err_log.log"
                    fi
                    touch "/scripts/lisp/${name%.cl}" && chmod 757 "/scripts/lisp/${name%.cl}"
                    printf "#!/bin/env sbcl\n\n;; Write script code" > "/scripts/lisp/${name%.cl}"
                    if [[ -e "/scripts/lisp/${name%.cl}" ]]; then
                        echo "Script Created!"
                    fi
                else #Deal with Bash
                    touch "/scripts/${name%.**}" && chmod 757 "/scripts/${name%.**}"
                    printf "#!/bin/bash\n\n#Write script code" > "/scripts/${name%.**}"
                    if [[ -e "/scripts/${name%.**}" ]]; then
                        echo "Script Created!"
                    fi
                fi
            else
                echo "Script with that name exists! Keeping Original..."
                echo "Would you like to open this script?"
                read yn
                if [[ "${yn,}" =~ "y" ]]; then
                    bsm -o "${name%.**}"
                fi
            fi
            ;;
        -o | --open )
            shift
            name=$1
            if [[ -e "/scripts/lisp/${name%.**}" || -e "/scripts/ruby/${name%.**}" || -e "/scripts/python/${name%.**}" || -e "/scripts/node/${name%.**}" || -e "/scripts/${name%.**}" ]]; then
                find -L /scripts -name "${name%.**}" -exec sudo nano {} \;
            else
                bsm -c "$name" -o "${name%.**}"
            fi
            exit;;
        -r | --remove )
            shift
            name=( "$@" )
            for n in $name; do
                if [[ -e "/scripts/${n%.**}" ]]; then
                    rm "/scripts/${n%.**}" >> $log 2>> $errlog
                    if [[ ! -e "/scripts/${n%.**}" ]]; then
                        echo "Script Removed!"
                    else
                        echo "Unable to remove script, refer to /var/log/bsm_err_log.log for details"
                    fi
                else
                    #Check for other executables
                    if [[ -e "/scripts/python/${n%.**}" ]]; then
                        rm "/scripts/python/${n%.**}" >> $log 2>> $errlog
                        if [[ ! -e "/scripts/python/${n%.**}" ]]; then
                            echo "Script(s) Removed!"
                        else
                            echo "Unable to remove script, refer to /var/log/bsm/err.log for details"
                        fi
                    elif [[ -e "/scripts/node/${n%.**}" ]]; then
                        rm "/scripts/node/${n%.**}" >> $log 2>> $errlog
                        if [[ ! -e "/scripts/node/${n%.**}" ]]; then
                            echo "Script(s) Removed!"
                        else
                            echo "Unable to remove script, refer to /var/log/bsm/err.log for details"
                        fi
                    elif [[ -e "/scripts/ruby/${n%.**}" ]]; then
                        rm "/scripts/ruby/${n%.**}" >> $log 2>> $errlog
                        if [[ ! -e "/scripts/ruby/${n%.**}" ]]; then
                            echo "Script(s) Removed!"
                        else
                            echo "Unable to remove script, refer to /var/log/bsm/err.log for details"
                        fi
                    elif [[ -e "/scripts/lisp/${n%.**}" ]]; then
                        rm "/scripts/lisp/${n%.**}" >> $log 2>> $errlog
                        if [[ ! -e "/scripts/lisp/${n%.**}" ]]; then
                            echo "Script(s) Removed!"
                        else
                            echo "Unable to remove script, refer to /var/log/bsm/err.log for details"
                        fi
                    else
                        echo "Script doesn't exist!"
                    fi
                fi
            done
            exit;;
        -L | --link )
            shift
            file=$1
            shift
            name=$1
            sudo chmod 757 "$file"
            ln -s -t /scripts "$file" "$name" >> $log 2>> $errlog
            if [[ -e "/scripts/$name" ]]; then
                echo "Script Linked!"
            else
                echo "Failed to Link!"
            fi
            ;;
        -a | --add )
            shift
            name=$1
            bsm -c "$name"
            scriptpath="/scripts"
            if [[ "$name" =~ ".js" ]]; then
                scriptpath="$scriptpath/node"
            elif [[ "$name" =~ ".py" ]]; then
                scriptpath="$scriptpath/python"
            elif [[ "$name" =~ ".rb" ]]; then
                scriptpath="$scriptpath/ruby"
            elif [[ "$name" =~ ".cl" ]]; then
                scriptpath="$scriptpath/lisp"
            fi
            cat < find -L -type f ~ -name "$name" >> "$scriptpath/${name%.**}"
            ;;
        -l | --list )
            echo "Available Scripts:"
            ls -pR1 /scripts | grep -v / | tr -s '\n' ' ' | tr ' ' '\n' | xargs -i echo "- {}"
            exit;;
        -I | --install )
            bsm-install
            exit;;
        -U | --uninstall )
            bsm-install -u
            exit;;
        -R | --reinstall-deps )
            shift
            if [[ "$1" != "" ]]; then
                bsm-install -rd "$1"
            else
                bsm-install -rd
            fi
            exit;;
        -v | --version )
            echo "$version"
            exit;;
        -h | --help )
            echo "$help"
            exit;;
        * )
            echo "$help"
            exit;;
    esac
    shift
done
