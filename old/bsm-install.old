#!/bin/bash

version=$(cat $(find -type f -name ".old.version") | tail -1)
log="/var/log/bsm_log.log"
errlog="/var/log/bsm_err_log.log"

if [[ "$1" == "-l" ]]; then
  shift
  if [[ "$1" == "-o" ]]; then
    echo "Output Log:"
    cat $log
    exit
  elif [[ "$1" == "-e" ]]; then
    echo "Error Log:"
    cat $errlog
    exit
  else
    clear
    while true; do
      echo "Which log would you like to view?"
      echo "[1] Output Log"
      echo "[2] Error Log"
      read opt
      clear
      if [[ "$opt" == "1" ]]; then
        echo "Output Log:"
        cat $log
        exit
      elif [[ "$opt" == "2" ]]; then
        echo "Error Log:"
        cat $errlog
        exit
      else
        echo "Not an option"
      fi
    done
  fi
elif [[ "$1" == "-v" ]]; then
  echo "$version"
elif [[ "$1" == "-u" ]]; then
  echo "Uninstalling BSM..."
  sudo rm -r /scripts
  sudo rm /var/log/bsm_log.log
  sudo rm /var/log/bsm_err_log.log
  sudo rm /usr/local/bin/bsm-old
  echo "Uninstalling BSM-install..."
  sudo rm /usr/local/sbin/bsm-install-old
  # echo "Resetting PATH..."
  # echo "$(head -n -1 ~/.bashrc)" > ~/.bashrc #Reset bashrc (Assumes it is the last entry)
  # export PATH="$(echo "$PATH" | tr -s ':' '\n' | grep -v "/scripts" | tr -s '\n' ':' | sed 's/.$//')" #Reset PATH
  echo "Sucessfully uninstalled BSM!"
elif [[ "$1" == "-c" ]]; then
  #Clear log files
  echo "Clearing logs..."
  echo "" > /var/log/bsm_err_log.log
  echo "" > /var/log/bsm_log.log
  if [[ "$2" == "log" ]]; then
    exit
  elif [[ "${2,,}" =~ "node" ]]; then
    echo -n "This will clear all Node.js scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Node.js scripts..."
      sudo rm /scripts/_node/*
    fi
  elif [[ "${2,,}" =~ "py" ]]; then
    echo -n "This will clear all Python scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Python scripts..."
      sudo rm /scripts/_python/*
    fi
  elif [[ "${2,,}" =~ "ruby" ]]; then
    echo -n "This will clear all Ruby scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Ruby scripts..."
      sudo rm /scripts/_ruby/*
    fi
  elif [[ "${2,,}" =~ "l" ]]; then
    echo -n "This will clear all LISP scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing LISP scripts..."
      sudo rm /scripts/_lisp/*
    fi
  elif [[ "${2,,}" =~ "sh" ]]; then
    echo -n "This will clear all Bash scripts, are you sure you want to delete these scripts? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing Bash scripts..."
      sudo rm /scripts/* 2> /dev/null
    fi
  else
    echo -n "This will clear ALL SCRIPTS. Do you want to continue? [Y/n] "
    read yn
    if [[ "${yn,,}" == 'y' ]]; then
      echo "Removing all scripts..."
      sudo rm /scripts/_node/* 2> /dev/null
      sudo rm /scripts/_ruby/* 2> /dev/null
      sudo rm /scripts/_python/* 2> /dev/null
      sudo rm /scripts/_lisp/* 2> /dev/null
      sudo rm /scripts/* 2> /dev/null
    fi
  fi
elif [[ "$1" == "-rd" ]]; then
  if [[ "${2,,}" =~ "node" ]]; then
  echo "Installing and setting up Node..."
    sudo mkdir /scripts/_node
    sudo snap install --edge node --classic >> $log 2>> $errlog
  elif [[ "${2,,}" =~ "py" ]]; then
  echo "Installing and setting up Python..."
    sudo mkdir /scripts/_python
    sudo apt-get install python3-pip >> $log 2>> $errlog
  elif [[ "${2,,}" =~ "ruby" ]]; then
  echo "Installing and setting up Ruby..."
    sudo mkdir /scripts/_ruby
    sudo apt-get install ruby-full >> $log 2>> $errlog
  elif [[ "${2,,}" =~ "l" ]]; then
  echo "Installing and setting up LISP..."
    sudo mkdir /scripts/_lisp
    sudo apt-get install sbcl >> $log 2>> $errlog
  else
    echo "Setting up BSM Folders..."
    sudo mkdir /scripts/_node
    sudo mkdir /scripts/_python
    sudo mkdir /scripts/_ruby
    sudo mkdir /scripts/_lisp
    echo "Installing BSM Dependencies..."
    sudo snap install --edge node --classic >> $log 2>> $errlog
    sudo apt-get install python3-pip >> $log 2>> $errlog
    sudo apt-get install ruby-full >> $log 2>> $errlog
    sudo apt-get install sbcl >> $log 2>> $errlog
  fi
else
  #general install for BSM
  echo "Installing..."
  sudo cp "$(find ~ -name "bsm.old")" /usr/local/bin/bsm-old && echo "Copy of BSM added to program registry!"
  sudo cp "$(find ~ -name "bsm-install.old")" /usr/local/sbin/bsm-install-old && echo "Installer copied to system registry!"
  sudo chmod 755 /usr/local/bin/bsm-old
  echo "Updating PATH..."
  #This assumes you haven't modified the original bashrc file with your own things that don't end in 'fi'
  if [[ "$(echo "$PATH" | grep /scripts)" == "" ]]; then
    echo "export PATH=\"$PATH:/scripts:/scripts/_node:/scripts/_python:/scripts/_ruby:/scripts/_lisp\"" >> ~/.bashrc
  fi
  echo "Setting up logging and scripts folders..."
  if [ ! -d "/scripts" ]; then
    sudo mkdir /scripts
    sudo chown $USER /scripts
    sudo chgrp $USER /scripts
  fi
  if [ ! -e "/var/log/bsm_err_log.log" ]; then
    sudo touch /var/log/bsm_err_log.log
    sudo chown $USER /var/log/bsm_err_log.log
    sudo chgrp $USER /var/log/bsm_err_log.log
    sudo chmod 766 /var/log/bsm_err_log.log
  fi
  if [ ! -e "/var/log/bsm_log.log" ]; then
    sudo touch /var/log/bsm_log.log
    sudo chown $USER /var/log/bsm_log.log
    sudo chgrp $USER /var/log/bsm_log.log
    sudo chmod 766 /var/log/bsm_log.log
  fi

  #This should setup BSM, logging is sent to stdout to check for any errors
  echo "BSM has been successfully installed!"
fi

#General fallout
exit